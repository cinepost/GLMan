#ifndef RixSloInfo_h
#define RixSloInfo_h
/* $Revision: #3 $  $Date: 2014/12/10 $ */
/*
# ------------------------------------------------------------------------------
#
# Copyright (c) 2006-2012 Pixar Animation Studios. All rights reserved.
#
# The information in this file (the "Software") is provided for the
# exclusive use of the software licensees of Pixar.  Licensees have
# the right to incorporate the Software into other products for use
# by other authorized software licensees of Pixar, without fee.
# Except as expressly permitted herein, the Software may not be
# disclosed to third parties, copied or duplicated in any form, in
# whole or in part, without the prior written permission of
# Pixar Animation Studios.
#
# The copyright notices in the Software and this entire statement,
# including the above license grant, this restriction and the
# following disclaimer, must be included in all copies of the
# Software, in whole or in part, and all permitted derivative works of
# the Software, unless such copies or derivative works are solely
# in the form of machine-executable object code generated by a
# source language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT
# SHALL PIXAR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/
#include "RixInterfaces.h"
#include "slo.h"

/**
    The RixSloInfo interface is used to inspect compiled shaders (.slo files).
    It is a thin vaneer atop the traditional slo.h interface intented to hide
    the symbol references behind the Rix interface wall.  This makes it
    easier for clients to deploy packages that are loosely bound to
    the implemenation (libprman.so, librix.so) and thus facilitate runtime 
    selection of the implementatiion (often via RMANTREE).
    
    Clients can use dlopen on the implementation, obtain a reference to
    the RixGetContext entrypoint, then obtain a reference to this 
    RixSloInfo interface as follows:

    * find the runtime implementation file
    * use dlopen (or equiv) to inspect the runtime
    * use dlsym (or equiv) to get a handle onto RixGetContext
    * invoke RixGetContext to obtain a RixContext * (rctx below)
    * invoke rctx->GetIinterface to obtain a RixSloInfo * (typecast 
      from RixInterface *).

    This interface is available in non-rendering contexts.
*/

class RixSloInfo : public RixInterface
{
public:
    virtual void SetPath(char const *path) = 0;
    virtual char const *GetPath() = 0;
    virtual int SetShader(char const *name) = 0;
    virtual char const *GetName() = 0;
    virtual SLO_TYPE GetType() = 0;
    virtual int HasMethod(char const *name) = 0;
    virtual int GetNArgs() = 0;
    virtual SLO_VISSYMDEF const *GetArgByName(char const *name) = 0;
    virtual SLO_VISSYMDEF const *GetArgById(int id) = 0;
    virtual SLO_VISSYMDEF const *GetArrayArgElement(SLO_VISSYMDEF const *array,
                                                        int index) = 0;
    virtual void EndShader() = 0;
    virtual char const *TypetoStr(SLO_TYPE type) = 0;
    virtual char const *StortoStr(SLO_STORAGE storage) = 0;
    virtual char const *DetailtoStr(SLO_DETAIL detail) = 0;
    virtual char const *GetMetaData(char const * name) = 0;

    // These routines return allocated arrays that must be freed by caller.
    // The contained strings need *not* be freed.
    virtual char const ** GetMethodNames() = 0;
    virtual char const ** GetAllMetaData() = 0;
    virtual char const ** GetPlugins() = 0;
    virtual void Free(void *) = 0;

    
    virtual SLO_METHOD           GetMethodHandle(char const * name) = 0;
    virtual int                  GetNMethodArgs(SLO_METHOD method) = 0;
    virtual SLO_VISSYMDEF const *GetMethodArgByName(SLO_METHOD method, 
                                                          char const *name) = 0;
    virtual SLO_VISSYMDEF const *GetMethodArgById(SLO_METHOD method, int id)= 0;
    virtual SLO_VISSYMDEF const *GetArrayMethodArgElement(SLO_METHOD method, 
                                     SLO_VISSYMDEF const *array, int index) = 0;

    virtual char const **GetStructNames() = 0; // caller freed
    virtual SLO_VISSYMDEF const *GetStructByName(char const *name) = 0;
    virtual SLO_VISSYMDEF const *GetStructMember(
                                         SLO_STRUCTID structid, int member) = 0;
    virtual SLO_VISSYMDEF const *GetArrayStructMemberElement(
                              SLO_STRUCTID structid, int member, int index) = 0;
protected:
    /// Constructor,Destuctor are for internal use only.
    RixSloInfo() : RixInterface(2) { }
    virtual ~RixSloInfo() {}
};

#endif 
