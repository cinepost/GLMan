#ifndef _POINTCLOUD_
#define _POINTCLOUD_

/* $Revision: #5 $  
 * (Pixar - RenderMan Division)
 * $Date: 2014/12/10 $ 
 */
/*
# ------------------------------------------------------------------------------
#
# Copyright (c) 2007-2010 Pixar Animation Studios. All rights reserved.
#
# The information in this file (the "Software") is provided for the
# exclusive use of the software licensees of Pixar.  Licensees have
# the right to incorporate the Software into other products for use
# by other authorized software licensees of Pixar, without fee.
# Except as expressly permitted herein, the Software may not be
# disclosed to third parties, copied or duplicated in any form, in
# whole or in part, without the prior written permission of
# Pixar Animation Studios.
#
# The copyright notices in the Software and this entire statement,
# including the above license grant, this restriction and the
# following disclaimer, must be included in all copies of the
# Software, in whole or in part, and all permitted derivative works of
# the Software, unless such copies or derivative works are solely
# in the form of machine-executable object code generated by a
# source language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT
# SHALL PIXAR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/

#include "prmanapi.h"

typedef void *PtcPointCloud;
// PtcFilePos must be 64 bits on all platforms.  (RtUint64 is defined 
// in prmanapi.h)
typedef RtInt64 PtcFilePos;   // a 64-bit signed integer on all platforms

typedef struct PtcDataPoint {
    float position[3], normal[3];
    float radius;
    float *data;
} PtcDataPoint;

typedef struct PtcTreeNode {
    int firstpoint; // index of first data point
    int npoints; // number of data points in this octree node
    float bbox[6]; // order: minx miny minz maxx maxy maxz
    float *data;
    PtcFilePos childpos[8]; 
} PtcTreeNode;

#ifdef __cplusplus
extern "C" {
#endif

/* Point cloud API version number */
#define RMAN_POINTCLOUD_API_VERSION 5

/* Point cloud API */

// Write
PRMANAPI extern PtcPointCloud PtcCreatePointCloudFile(char *filename,
	int nvars, char **vartypes, char **varnames,
        float *world2eye, float *world2ndc, float *format);

PRMANAPI extern PtcPointCloud PtcCreateOrgPointCloudFile(char *filename,
	int npvars, char **pvartypes, char **pvarnames,
	int ntvars, char **tvartypes, char **tvarnames,
        float *world2eye, float *world2ndc, float *format);

PRMANAPI extern int PtcWriteDataPoint(PtcPointCloud pointcloud,
	float *point, float *normal, float radius, float *data);

PRMANAPI extern int PtcWriteTreeNode(PtcPointCloud pointcloud,
	int firstpoint, int npoints, float bbox[6], float *data,
        PtcFilePos childpos[8],
        PtcFilePos *filepos); // a result

PRMANAPI extern void PtcFinishPointCloudFile(PtcPointCloud pointcloud);


// Read
PRMANAPI extern PtcPointCloud PtcOpenPointCloudFile(char *filename,
	int *nvars, char **vartypes, char **varnames); // superceded

PRMANAPI extern PtcPointCloud PtcSafeOpenPointCloudFile(char *filename);

PRMANAPI extern int PtcGetPointCloudInfo(PtcPointCloud pointcloud,
        char *request, void *result);

PRMANAPI extern void PtcReadBegin(PtcPointCloud pointcloud);

PRMANAPI extern int PtcReadDataPoint(PtcPointCloud pointcloud,
	float *point, float *normal, float *radius, float *data);

PRMANAPI extern int PtcReadDataPoints(PtcPointCloud pointcloud,
	int firstpoint, int npoints, PtcDataPoint *pointlist);

PRMANAPI extern int PtcReadTreeNode(PtcPointCloud pointcloud, 
        PtcFilePos filepos, int *firstpoint, int *npoints, float bbox[6],
	float *data, PtcFilePos childpos[8]);

PRMANAPI extern int PtcReadTreeNodes(PtcPointCloud pointcloud, 
	PtcFilePos filepos[8], PtcTreeNode nodes[8]);

PRMANAPI extern int PtcGetNearestPointsData(PtcPointCloud pointcloud,
	float *point, float *normal, float maxdist, int numpoints, float *data);

PRMANAPI extern void PtcReadEnd(PtcPointCloud pointcloud);

PRMANAPI extern void PtcClosePointCloudFile(PtcPointCloud pointcloud);

#ifdef __cplusplus
}
#endif

#endif /* _POINTCLOUD_ */
