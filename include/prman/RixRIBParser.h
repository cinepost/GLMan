#ifndef RixRIBParser_h
#define RixRIBParser_h
/* $Revision: #3 $ $Date: 2014/12/10 $ */
/*
# ------------------------------------------------------------------------------
#
# Copyright (c) 2006-2012 Pixar Animation Studios. All rights reserved.
#
# The information in this file (the "Software") is provided for the
# exclusive use of the software licensees of Pixar.  Licensees have
# the right to incorporate the Software into other products for use
# by other authorized software licensees of Pixar, without fee.
# Except as expressly permitted herein, the Software may not be
# disclosed to third parties, copied or duplicated in any form, in
# whole or in part, without the prior written permission of
# Pixar Animation Studios.
#
# The copyright notices in the Software and this entire statement,
# including the above license grant, this restriction and the
# following disclaimer, must be included in all copies of the
# Software, in whole or in part, and all permitted derivative works of
# the Software, unless such copies or derivative works are solely
# in the form of machine-executable object code generated by a
# source language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT
# SHALL PIXAR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/
#include "RixInterfaces.h"
#include "RifPlugin.h"

/**
    The RixRIBParser interface is used to parse a RIB file. RIB files can be 
    either binary or ascii, and, optionally, can be located within a .zip 
    file. Caller provides callbacks in the form of a RifFilter and should 
    include the appropriate RifFilter headers as well. Calls to ParseRIBFile 
    can be nested. A code snippet illustrating this class is below:

    \code
        RixInterface *xif = RixGetContext()->GetRixInterface(k_RixRIBParser);
        RixRIBParser *ribif = static_cast<RixRIBParser *>(xif);
        RifFilter myfilter;

        myfilter.SphereV = mySphereV;
        myfilter.ConeV = myConeV;
        myfilter.ReadArchiveV = myReadArchiveV;

        ribParseIF->Begin(&myfilter);
        ribParseIF->ParseRIBFile("hello.rib");
        ribParseIF->End();
    \endcode

    This example would parse the RIB in the file "hello.rib" and
    call user-defined filter functions for Sphere, Cone, and ReadArchive.

    Brief:
      This interface can be used in both standalone (librix) mode and
      from within procedural and Rif plugins. It cannot be used in other
      render-time contexts, including RslPlugins, subdiv evaluation, and 
      implicit fields. In the standalone mode caller must invoke the Begin() 
      and End() method.  In rendertime mode, the caller should not use 
      Begin() / End() because the renderer has already setup the parsing state,
      thus can only initiate  the parsing in the context of the active Rif 
      chain.
    
      In librix mode:
       - Initialize parser with Begin() (once per session), cleanup with End().
       - Invoke ParseRIBFile() / ParseRIBBuffer() between Begin() / End().
       - Intercept Ri calls using RifFilter handlers.
       - Issue more ParseRIBFile() as needed (e.g. to handle ReadArchive).
       - Determine the size of parameterlist entries with GetDeclaration() 
         coupled with per-primitive specs.
   
      In procedural primitive and Rif plugins:
       - Do not call Begin() / End().
       - Trigger parsing via ParseRIBFile() / ParseRIBBuffer().
       - If you need parsing callbacks, standard Rif plugins can be
         employed (but must be installed via standard mechanisms).
*/

class RixRIBParser : public RixInterface
{
public:
    
    /// Used to initialize the parser when in librix mode (standalone)
    virtual int Begin(const RifFilter *)=0;

    /// Parse the RIB within a file given by filename
    virtual int ParseRIBFile(const char *filename)=0;

    /// Parse the RIB in memory pointed to by buffer
    virtual int ParseRIBBuffer(const char *buffer)=0;

    /// Used to destruct the parser state in librix mode
    virtual int End()=0;

    /// A helper method to determine the size of parameter list entries
    virtual int GetDeclaration(RtToken t, 
                               RifTokenType*, RifTokenDetail* , int *alen)=0;

protected:
    /// Constructor,Destuctor are for internal use only.
    RixRIBParser() : RixInterface(1) { }
    virtual ~RixRIBParser() {}
};

#endif 
