#ifndef RixPattern_h
#define RixPattern_h
/* $Revision: #2 $ $Date: 2014/12/10 $
# ------------------------------------------------------------------------------
#
# Copyright (c) 2013 Pixar Animation Studios. All rights reserved.
#
# The information in this file (the "Software") is provided for the
# exclusive use of the software licensees of Pixar.  Licensees have
# the right to incorporate the Software into other products for use
# by other authorized software licensees of Pixar, without fee.
# Except as expressly permitted herein, the Software may not be
# disclosed to third parties, copied or duplicated in any form, in
# whole or in part, without the prior written permission of
# Pixar Animation Studios.
#
# The copyright notices in the Software and this entire statement,
# including the above license grant, this restriction and the
# following disclaimer, must be included in all copies of the
# Software, in whole or in part, and all permitted derivative works of
# the Software, unless such copies or derivative works are solely
# in the form of machine-executable object code generated by a
# source language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT
# SHALL PIXAR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/

#include "RixShading.h"

/**
    The RixPattern interface characterizes pattern generation for
    the purposes of RixBxdf parameterization.  Non-constant patterns
    can themselves be parameterized by some aspect of the RixShadingContext.
    Typically, RixPatterns operate atop a filter width associated with
    the shading context. Internally RixPatterns, in order to respond
    to the ComputeOuputParams request, must request the RixShadingContext
    to evaulate input parameters associated with the named outputs.
**/
class RixPattern : public RixShadingPlugin
{
public:
    virtual int GetInterface() const { return k_RixPattern; }
    virtual int Init(RixContext &ctx, char const *pluginPath) = 0;
    virtual RixSCParamInfo const *GetParamTable() = 0;
    // GetInstanceParamTable returns a specialized interface definition 
    // associated with the Ri parameterization.  Memory is owned by plugin 
    // and should be carefully tracked as there may be thousands of instances
    // in a rendering session. This call might be called in multiple threads
    // and should be re-entrant and thread-safe.   
    // Generally concrete interfaces should be preferred over dynamic 
    // interfaces due to their extra memory expense.
    virtual RixSCParamInfo const *GetInstanceParamTable(char const *handle,
                                                   RtConstPointer instancedata,
                                                   RixParameterList const *)
    { return NULL; }

    virtual void Finalize(RixContext &ctx) = 0;

    // ComputeOutputParams:
    //   Patterns are expected to allocate space for OutputSpec array via
    //   RixShadingContext::Allocate.  The optional instanceTable returned
    //   by plugin's GetInstanceParamTable is managed by the renderer and
    //   delivered with the associated instance.  Plugins that don't support
    //   the optional override capability can ignore the instanceTable
    //   parameter.
    // 
    //   returns 0 for success, non-zero for error
    struct OutputSpec
    {
        RtInt paramId;      // into param table
        RixSCDetail detail; // output detail may be determined by inputs
        RtConstPointer value;
    };
    virtual int ComputeOutputParams(RixShadingContext const *sCtx,
                                    RtInt *n, OutputSpec **outputs,
                                    RtConstPointer instanceData,
                                    RixSCParamInfo const *instanceTable) = 0;

protected:
    RixPattern() : RixShadingPlugin(k_RixShadingVersion) {}
    virtual ~RixPattern() {}
};

#define RIX_PATTERNCREATE \
 extern "C" PRMANEXPORT RixPattern *CreateRixPattern(const char *hint)

#define RIX_PATTERNDESTROY \
 extern "C" PRMANEXPORT void DestroyRixPattern(RixPattern *pattern)

#endif
