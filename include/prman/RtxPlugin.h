#ifndef RTXPLUGIN_H
#define RTXPLUGIN_H

/* $Id: //depot/branches/rmanprod/rman-19.0/include/RtxPlugin.h#3 $ $Date: 2014/12/10 $ */
/*
# ------------------------------------------------------------------------------
#
# Copyright (c) 2010 Pixar Animation Studios. All rights reserved.
#
# The information in this file (the "Software") is provided for the
# exclusive use of the software licensees of Pixar.  Licensees have
# the right to incorporate the Software into other products for use
# by other authorized software licensees of Pixar, without fee.
# Except as expressly permitted herein, the Software may not be
# disclosed to third parties, copied or duplicated in any form, in
# whole or in part, without the prior written permission of
# Pixar Animation Studios.
#
# The copyright notices in the Software and this entire statement,
# including the above license grant, this restriction and the
# following disclaimer, must be included in all copies of the
# Software, in whole or in part, and all permitted derivative works of
# the Software, unless such copies or derivative works are solely
# in the form of machine-executable object code generated by a
# source language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT
# SHALL PIXAR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/

#include "ri.h"
#include <stdarg.h>
#include <assert.h>
#include <string>
#include <map>

// A RixContext is provided to an RtxPlugin at
// creation time, so that the plugin may use
// services provided by the renderer.
class RixContext;

// An RtxPlugin class 
class RtxPlugin {
public:
    RtxPlugin() {}
    virtual ~RtxPlugin() {}

   //! A struct to define an X,Y coordinate
    struct Int2D 
    {
        int X;
        int Y;
    };

    //! A struct to define a 2D region
    struct Tile2D 
    {
        Int2D offset;
        Int2D size;
    };

    /**
       TextureCtx provides initial defining properties for textures generated 
       by this plugin. Each plugin should fill this structure during an
       Open() method call. Open() is called for each unique instance of a given
       texture() call in the shader. A unique instance is defined by the string
       passed to the file parameter of the texture() SL call. 
       NOTE: The Open() method may be called multiple times for a texture 
        as will Close(). On a Close() all resources should be released, and 
        on an Open() they are safe to reaquire. 
    **/
    struct TextureCtx {
        /// This is the total number of channels present
        int numChannels;

        /// The maximum # of layers this texture can access.
        unsigned int numLayers;

        /// Plugin fills in the names and channel-count of the layers 
        /// associated with this texture.  Fill requests are characterized
        /// by the combination of layername, channelOffset and nchans.
        ///
        /// Memory for the array is owned and managed by the plugin
        struct layerSpec
        {
            const char *name;
            unsigned numChannels;
        } **layers;

        /// The min,max resolution requested for this texture.
        Int2D   minRes, maxRes;

        /// The wrap mode applied at the edges of max resolution
        enum WrapMode 
        {
            k_Black = 0,
            k_Clamp,
            k_Periodic
        } sWrap, tWrap;

        /// The type of the data provided by the texture
        enum DataType 
        {
            k_Byte = 0,
            k_Float
        } dataType;

        /// What type of pyramid should be used?
        enum PyramidType 
        {
            k_Single = 0,
            k_MIP,
            k_RIP
        } pyramidType;

        /// Should the tile be locked while filling? (not thread safe?)
        bool isLocked;

        /// Read-only texture args, they come in pairs, memory
        /// is owned by the renderer.
        unsigned int argc;
        const char **argv;

        /// The plugin can use this field to stash its own instance
        /// data. The plugin manages ownership.
        void *userData;

        // Version 2 API starts here

        // A plugin can request retry on error
        // a fill may be aborted mid fill request
        // during rerendering (resulting in incorrect fill data)
        // Authors may request such errors during fill are retried
        // during subsequent attempts to fill.
        bool retryOnError;
    };

    /// The Open() method is called the first time a texture() encounters
    /// the plugin and provides a unique arg string.
    virtual int Open (TextureCtx& tCtx) = 0; 

    /// NOTE: multi-channel textures might receive a FillRequest
    /// of fewer than nchans with a channelOffset >= 0 if a given
    /// channel of a multi-channel texture has been evicted by the
    /// texture cache.
    struct FillRequest {
        // This is the resolution of the image at a given MIP level
        Int2D imgRes; 

        // This is the tile index and tile size
        Tile2D tile;
       
        // This is a channel selection string. This string can be
        // NULL if channel selection is not made by string. 
        const char *channelRefExpr;

        // This is the offset from zero for a given channel selection
        // It is always zero if channelRefExpr is not NULL.
        int channelOffset;

        // This is the number of channels we want to fill
        int numChannels;
        
        // The data (interleaved) with GetStride() channels
        // that the plugin should write the tile results into
        RtPointer tileData;
    };
             
    // The plugin should use the fillReq inputs to write to the
    // tileData in the FillRequest. Return nonzero on errors.
    virtual int Fill (TextureCtx& tCtx,
                           FillRequest& fillReq) = 0;

    // The plugin should release all assets at Close()
    virtual int Close (TextureCtx& tCtx) = 0; 
};

#define RTXPLUGINCREATE\
        extern "C" const PRMANEXPORT int RtxPluginVersion=2;\
        extern "C" PRMANEXPORT RtxPlugin *RtxPluginNew(RixContext *rixCtx, \
                                                       const char *pluginName) 
#endif
