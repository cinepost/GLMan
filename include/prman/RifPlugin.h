#ifndef RifPlugin_h
#define RifPlugin_h

/* $Revision: #3 $ ($Date: 2014/12/10 $) */
/*
# ------------------------------------------------------------------------------
#
# Copyright (c) 2003-2010 Pixar Animation Studios. All rights reserved.
#
# The information in this file (the "Software") is provided for the
# exclusive use of the software licensees of Pixar.  Licensees have
# the right to incorporate the Software into other products for use
# by other authorized software licensees of Pixar, without fee.
# Except as expressly permitted herein, the Software may not be
# disclosed to third parties, copied or duplicated in any form, in
# whole or in part, without the prior written permission of
# Pixar Animation Studios.
#
# The copyright notices in the Software and this entire statement,
# including the above license grant, this restriction and the
# following disclaimer, must be included in all copies of the
# Software, in whole or in part, and all permitted derivative works of
# the Software, unless such copies or derivative works are solely
# in the form of machine-executable object code generated by a
# source language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT
# SHALL PIXAR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/

/* 
 * RifPlugin.h represents the public interface to Ri Filter support.
 *	Plug-in Ri Filter developers should include this file
 *  	and implement the RifManufactureFilter call. Note
 *	that this file requires c++.
 */
#include "prmanapi.h"

/* required of a Ri Filter plug-in *---------------------------------*/
#ifdef __cplusplus
#include "RifFilter.h"
			/*
			 * RifPlugin:
			*    all plug-in Ri Filters must subclass
			*   this pure-virtual class. Your subclass
			*   can have any number of RifFilter objects
			*   and can choose which to return based
			*   on its own state.
			*/
class RifPlugin
{
public:
    virtual     	~RifPlugin() {} /* virtual destructor */
    virtual RifFilter & GetFilter() =  0;
};
#else
typedef void RifPlugin;
#endif

#ifdef __cplusplus
extern "C" {
#endif
    	    	    	/* RifPluginManufacture  :
			 *  Filter plugin-ins must implement
			 *  the RifPluginManufacture procedure.
			 *  This procedure constructs an instance 
			 *  of a RifPlugin subclass.
		    	 */
PRMANEXPORT RifPlugin *	RifPluginManufacture(int argc, char **argv);


/* runtime services available to Ri Filter plug-ins----------------------*/
			/*
		 	 * These entrypoints are available to
			 * Filters to access server functionality
			 * and state.
			 */
    	    	    	typedef enum
			{
			    k_RifParseNextLayer,
			    k_RifParseThisLayer,
			    k_RifParseFirstLayer
			} RifParseMode;
PRMANAPI void    	RifParseFile(const char *filename, RifParseMode m);
PRMANAPI void    	RifParseBuffer(const char *buf, unsigned size,
                                        RifParseMode m);
			typedef enum
			{
			    k_RifFloat=0,
			    k_RifPoint,
			    k_RifColor,
			    k_RifInteger,
			    k_RifString,
			    k_RifVector,
			    k_RifNormal,
			    k_RifHPoint,
			    k_RifMatrix,
			    k_RifMPoint
			} RifTokenType;
			typedef enum
			{
			    k_RifConstant=0,
			    k_RifUniform,
			    k_RifVarying,
			    k_RifVertex,
			    k_RifFaceVarying
			} RifTokenDetail;
PRMANAPI RtToken        RifGetToken(const char *str);
PRMANAPI RtInt		RifGetDeclaration(RtToken nm, 
				RifTokenType *,
				RifTokenDetail *,
				int *arraylen);
			typedef enum
			{
			    k_RifRIB,
			    k_RifRenderer
			} RifEmbedding;
PRMANAPI RifEmbedding	RifGetEmbedding();
PRMANAPI void           RifGetCurrentBasisSteps(int *usteps, int *vstep);
PRMANAPI void	        RifGetChainInfo(RtInt *current, RtInt *total);
PRMANAPI RifPlugin *   	RifGetCurrentPlugin();

PRMANAPI RifPlugin *    RifLoadPlugin(const char*pluginpath, 
                                     int argc,  char const *argv[]);
PRMANAPI void           RifInit(int nplugins, RifPlugin *plugins[]);
PRMANAPI void           RifGetChain(RifPlugin* chaincopy[], int* count);
PRMANAPI void           RifSetChain(RifPlugin* newchain[], int count);
PRMANAPI void           RifPushChain();
PRMANAPI void           RifPopChain();

#ifdef __cplusplus
}
#endif

#endif
