#ifndef RixBuiltinShading_h
#define RixBuiltinShading_h
/* $Revision: #4 $ $Date: 2015/01/14 $
# ------------------------------------------------------------------------------
#
# Copyright (c) 2013-2015 Pixar Animation Studios. All rights reserved.
#
# The information in this file (the "Software") is provided for the
# exclusive use of the software licensees of Pixar.  Licensees have
# the right to incorporate the Software into other products for use
# by other authorized software licensees of Pixar, without fee.
# Except as expressly permitted herein, the Software may not be
# disclosed to third parties, copied or duplicated in any form, in
# whole or in part, without the prior written permission of
# Pixar Animation Studios.
#
# The copyright notices in the Software and this entire statement,
# including the above license grant, this restriction and the
# following disclaimer, must be included in all copies of the
# Software, in whole or in part, and all permitted derivative works of
# the Software, unless such copies or derivative works are solely
# in the form of machine-executable object code generated by a
# source language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT
# SHALL PIXAR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/

#include "RixBxdf.h"

class RixSSDiffusion : public RixVolumeIntegrator
{
public:
    RixSSDiffusion(RixShadingContext const *sCtx, RixBxdfFactory *f) :
        RixVolumeIntegrator(sCtx, f) {}
    struct Params
    {
        Params() : _version(2), bumpNormal(NULL) {}

        int const _version; // always first in the struct

        // Parameterization #1 (used by PxrSubsurface):
        RtColorRGB const *albedo;
        RixSCDetail albedoDetail; // is albedo uniform or varying?
        RtColorRGB const *dmfp; // rgb diffuse mean free path lengths
        RixSCDetail dmfpDetail; // is dmfp uniform or varying?

        // Parameterization #2 (used by PxrSkin):
        RtColorRGB const *color1, *color2, *color3; // 3 colors
        RixSCDetail color1Detail, color2Detail, color3Detail;
        RtFloat const *weight1, *weight2, *weight3; // 3 weights
        RixSCDetail weight1Detail, weight2Detail, weight3Detail;
        RtFloat const *dmfp1, *dmfp2, *dmfp3; // 3 diff. mean free path lengths
        RixSCDetail dmfp1Detail, dmfp2Detail, dmfp3Detail;

        RtFloat unitLength;

        RtVector3 const *bumpNormal; // for bump-mapped normals

        // future parameters will appear here.

        char _reserved[32-sizeof(RtVector3 *)]; // always last in the struct
    };
    virtual void GetNearestHits(RtInt nRays, RtRayGeometry const *rays,
                                RixRNG *rng,
                                RixBXLobeTraits const &lobesWanted,
                                RixIntegratorContext &iCtx,
                                IntegratorDelegate *lcb,
                                RtInt *nGrps, 
                                RixShadingContext const **shadeGrps,
                                char const *subset=NULL
                                ) = 0;

protected:
    /// for internal use only.
    virtual ~RixSSDiffusion() {}
};

class RixNullBsdf : public RixBsdf
{
public:
    virtual RixBXEvaluateDomain GetEvaluateDomain() = 0;
    virtual void GetAllLobeTraits(RixBXLobeTraits *) = 0;
    virtual RtInt GetNumLobes() = 0;
    virtual void GenerateSample(RixBXTransportTrait transportTrait,
                                RixBXLobeTraits const *lobesWanted,
                                RixRNG *rng,
                                RixBXLobeSampled *lobeSampled,
                                RtVector3 *sampleDirs,
                                RixBXLobeWeights &weights,
                                RtFloat *forwardPdfs, RtFloat *reversePdfs) = 0;
    virtual void EvaluateSample(RixBXTransportTrait transportTrait,
                                RixBXLobeTraits const *lobesWanted,
                                RixBXLobeTraits *lobesEvaluated,
                                RtVector3 const *sampleDirs,
                                RixBXLobeWeights &weights,
                                RtFloat *forwardPdfs, RtFloat *reversePdfs) = 0;
    virtual void EvaluateSamplesAtIndex(RixBXTransportTrait transportTrait,
                                RixBXLobeTraits const &lobesWanted,
                                RtInt index,
                                RtInt nSamples,
                                RixBXLobeTraits *lobesEvaluated,
                                RtVector3 const *sampleDirs,
                                RixBXLobeWeights &weights,
                                RtFloat *forwardPdfs, RtFloat *reversePdfs) = 0;
private:
    // no parameters..
    virtual ~RixNullBsdf() {}
};

// RixLambertBxdf and RixDirac may go here...


#endif 
