#ifndef RixRiCtl_h
#define RixRiCtl_h
/* $Revision: #3 $  $Date: 2014/12/10 $
# ------------------------------------------------------------------------------
#
# Copyright (c) 2013 Pixar Animation Studios. All rights reserved.
#
# The information in this file (the "Software") is provided for the
# exclusive use of the software licensees of Pixar.  Licensees have
# the right to incorporate the Software into other products for use
# by other authorized software licensees of Pixar, without fee.
# Except as expressly permitted herein, the Software may not be
# disclosed to third parties, copied or duplicated in any form, in
# whole or in part, without the prior written permission of
# Pixar Animation Studios.
#
# The copyright notices in the Software and this entire statement,
# including the above license grant, this restriction and the
# following disclaimer, must be included in all copies of the
# Software, in whole or in part, and all permitted derivative works of
# the Software, unless such copies or derivative works are solely
# in the form of machine-executable object code generated by a
# source language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT
# SHALL PIXAR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
# OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/

#include "RixInterfaces.h"
#include "ri.hpp"

/** 
   The RixRiCtl interface provides access to the current thread's
   Ri context and is intended for use by procedural primitives
   as well as by applications that need to control a separate
   rendering or rerendering process using the Ric/Ri combination
   via libprman.so services.  Standalone applications should
   prefer the RixRIB interface coupled with librix.  When used
   in a procedural primitive context the usual Ri state constraints
   apply  (i.e. don't call ri->Begin, ri->End, ri->WorldBegin, etc).
   When used to control separate rendering process the additional 
   (Ric) interface methods may be used to syncronize state between
   applications.

   \code
   Ri *ri = riInterface->GetRi();
   if(ri)
       ri->SphereV(1, -1, 1, 360, 0, NULL, NULL);
   \endcode

*/

class RixRiCtl : public RixInterface 
{
public:
    /// PRMan methods ------------------------------------------------
    /// These entrypoints are useful to initiate a direct-linked
    /// prman session and intialized it with prman-standard commandline
    /// arguments.   It is an error to invoke these methods in any
    /// other execution context.
    virtual int PRManBegin(int argc, char *argv[]) = 0;
    virtual int PRManGo() = 0;
    virtual int PRManEnd() = 0;

    /// Ri methods ----------------------------------------------------
    /// Return a pointer to Ri generator, or NULL of there is an error.
    /// In direct-rendering situations these calls communicate directly
    /// with the renderer (albeit through the Rif layer). In 
    /// external-render mode, these calls produce RIB which is
    /// written to stdin of the child prman process.
    virtual Ri *GetRiCtx() = 0;

    /// Ric (Ri Control) methods --------------------------------------
    /// These should be used ether to control an external rendering session.
    /// Or to signal direct rendering abort.
   
    /// Flush the renderer to the given stream marker.
    virtual void Flush(RtString marker, RtBoolean synchronous,
                               RtToken flushmode) = 0;

    /// Return the percentage done of the current render. If there is no current
    /// render underway, this returns 100 (done).
    virtual RtInt GetProgress() = 0;
     
   /// Process outstanding callback requests (display, exception)
   virtual void ProcessCallbacks() = 0;

   /// Configure Ric
   virtual void Option(RtString name, RtPointer value) = 0;


protected:
    RixRiCtl() : RixInterface(1) {} 
    virtual ~RixRiCtl() {}

};

#endif
